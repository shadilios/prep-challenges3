{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Hacker Rank\n\nFor Thursdays you will be solving some selected challenges on HackerRank, please create an account if you don't have then\nFollow the links below:\nread them carefully and solve them then copy-paste your solution below in Code Block"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Required**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Birthday Cake Candles](https://www.hackerrank.com/challenges/birthday-cake-candles/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'birthdayCakeCandles' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY candles as parameter.\n */\n\nfunction birthdayCakeCandles(ar) {\n    // Write your code here\n    let max = 0;\n    let candles = 0;\n    for (let i =0; i<ar.length; i++){\n        if(max < ar[i]){\n            max = ar[i]; \n        }\n    }\n    \n    for (let i =0; i<ar.length; i++){\n        if(max == ar[i]){\n            candles++;\n        }\n    }\n    \n    return candles;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const candlesCount = parseInt(readLine().trim(), 10);\n\n    const candles = readLine().replace(/\\s+$/g, '').split(' ').map(candlesTemp => parseInt(candlesTemp, 10));\n\n    const result = birthdayCakeCandles(candles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n//done problem\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Optional**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Compare The Triplets](https://www.hackerrank.com/challenges/compare-the-triplets/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[36m<ref *1>\u001b[39m Socket {",
                                "  connecting: \u001b[33mfalse\u001b[39m,",
                                "  _hadError: \u001b[33mfalse\u001b[39m,",
                                "  _parent: \u001b[1mnull\u001b[22m,",
                                "  _host: \u001b[1mnull\u001b[22m,",
                                "  _readableState: ReadableState {",
                                "    objectMode: \u001b[33mfalse\u001b[39m,",
                                "    highWaterMark: \u001b[33m16384\u001b[39m,",
                                "    buffer: BufferList {",
                                "      head: \u001b[1mnull\u001b[22m,",
                                "      tail: \u001b[1mnull\u001b[22m,",
                                "      length: \u001b[33m0\u001b[39m",
                                "    },",
                                "    length: \u001b[33m0\u001b[39m,",
                                "    pipes: [],",
                                "    flowing: \u001b[33mtrue\u001b[39m,",
                                "    ended: \u001b[33mfalse\u001b[39m,",
                                "    endEmitted: \u001b[33mfalse\u001b[39m,",
                                "    reading: \u001b[33mtrue\u001b[39m,",
                                "    constructed: \u001b[33mtrue\u001b[39m,",
                                "    sync: \u001b[33mfalse\u001b[39m,",
                                "    needReadable: \u001b[33mtrue\u001b[39m,",
                                "    emittedReadable: \u001b[33mfalse\u001b[39m,",
                                "    readableListening: \u001b[33mfalse\u001b[39m,",
                                "    resumeScheduled: \u001b[33mfalse\u001b[39m,",
                                "    errorEmitted: \u001b[33mfalse\u001b[39m,",
                                "    emitClose: \u001b[33mfalse\u001b[39m,",
                                "    autoDestroy: \u001b[33mtrue\u001b[39m,",
                                "    destroyed: \u001b[33mfalse\u001b[39m,",
                                "    errored: \u001b[1mnull\u001b[22m,",
                                "    closed: \u001b[33mfalse\u001b[39m,",
                                "    closeEmitted: \u001b[33mfalse\u001b[39m,",
                                "    defaultEncoding: \u001b[32m'utf8'\u001b[39m,",
                                "    awaitDrainWriters: \u001b[1mnull\u001b[22m,",
                                "    multiAwaitDrain: \u001b[33mfalse\u001b[39m,",
                                "    readingMore: \u001b[33mfalse\u001b[39m,",
                                "    dataEmitted: \u001b[33mfalse\u001b[39m,",
                                "    decoder: StringDecoder {",
                                "      encoding: \u001b[32m'ascii'\u001b[39m,",
                                "      [\u001b[32mSymbol(kNativeDecoder)\u001b[39m]: <Buffer 00 00 00 00 00 00 00>",
                                "    },",
                                "    encoding: \u001b[32m'ascii'\u001b[39m,",
                                "    [\u001b[32mSymbol(kPaused)\u001b[39m]: \u001b[33mfalse\u001b[39m",
                                "  },",
                                "  _events: [Object: null prototype] {",
                                "    end: [",
                                "      \u001b[36m[Function: onReadableStreamEnd]\u001b[39m,",
                                "      \u001b[36m[Function: ontermend]\u001b[39m,",
                                "      \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      \u001b[36m[Function (anonymous)]\u001b[39m",
                                "    ],",
                                "    pause: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "    error: \u001b[36m[Function: onerror]\u001b[39m,",
                                "    data: [",
                                "      \u001b[36m[Function: onData]\u001b[39m,",
                                "      \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      \u001b[36m[Function (anonymous)]\u001b[39m",
                                "    ],",
                                "    keypress: \u001b[36m[Function: onkeypress]\u001b[39m",
                                "  },",
                                "  _eventsCount: \u001b[33m5\u001b[39m,",
                                "  _maxListeners: \u001b[90mundefined\u001b[39m,",
                                "  _writableState: WritableState {",
                                "    objectMode: \u001b[33mfalse\u001b[39m,",
                                "    highWaterMark: \u001b[33m16384\u001b[39m,",
                                "    finalCalled: \u001b[33mfalse\u001b[39m,",
                                "    needDrain: \u001b[33mfalse\u001b[39m,",
                                "    ending: \u001b[33mfalse\u001b[39m,",
                                "    ended: \u001b[33mtrue\u001b[39m,",
                                "    finished: \u001b[33mfalse\u001b[39m,",
                                "    destroyed: \u001b[33mfalse\u001b[39m,",
                                "    decodeStrings: \u001b[33mfalse\u001b[39m,",
                                "    defaultEncoding: \u001b[32m'utf8'\u001b[39m,",
                                "    length: \u001b[33m0\u001b[39m,",
                                "    writing: \u001b[33mfalse\u001b[39m,",
                                "    corked: \u001b[33m0\u001b[39m,",
                                "    sync: \u001b[33mtrue\u001b[39m,",
                                "    bufferProcessing: \u001b[33mfalse\u001b[39m,",
                                "    onwrite: \u001b[36m[Function: bound onwrite]\u001b[39m,",
                                "    writecb: \u001b[1mnull\u001b[22m,",
                                "    writelen: \u001b[33m0\u001b[39m,",
                                "    afterWriteTickInfo: \u001b[1mnull\u001b[22m,",
                                "    buffered: [],",
                                "    bufferedIndex: \u001b[33m0\u001b[39m,",
                                "    allBuffers: \u001b[33mtrue\u001b[39m,",
                                "    allNoop: \u001b[33mtrue\u001b[39m,",
                                "    pendingcb: \u001b[33m0\u001b[39m,",
                                "    constructed: \u001b[33mtrue\u001b[39m,",
                                "    prefinished: \u001b[33mfalse\u001b[39m,",
                                "    errorEmitted: \u001b[33mfalse\u001b[39m,",
                                "    emitClose: \u001b[33mfalse\u001b[39m,",
                                "    autoDestroy: \u001b[33mtrue\u001b[39m,",
                                "    errored: \u001b[1mnull\u001b[22m,",
                                "    closed: \u001b[33mfalse\u001b[39m,",
                                "    closeEmitted: \u001b[33mfalse\u001b[39m,",
                                "    writable: \u001b[33mfalse\u001b[39m,",
                                "    [\u001b[32mSymbol(kOnFinished)\u001b[39m]: []",
                                "  },",
                                "  allowHalfOpen: \u001b[33mfalse\u001b[39m,",
                                "  _sockname: \u001b[1mnull\u001b[22m,",
                                "  _pendingData: \u001b[1mnull\u001b[22m,",
                                "  _pendingEncoding: \u001b[32m''\u001b[39m,",
                                "  server: \u001b[1mnull\u001b[22m,",
                                "  _server: \u001b[1mnull\u001b[22m,",
                                "  fd: \u001b[33m0\u001b[39m,",
                                "  [\u001b[32mSymbol(async_id_symbol)\u001b[39m]: \u001b[33m3\u001b[39m,",
                                "  [\u001b[32mSymbol(kHandle)\u001b[39m]: Pipe {",
                                "    reading: \u001b[33mtrue\u001b[39m,",
                                "    [\u001b[32mSymbol(owner_symbol)\u001b[39m]: \u001b[36m[Circular *1]\u001b[39m",
                                "  },",
                                "  [\u001b[32mSymbol(kSetNoDelay)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "  [\u001b[32mSymbol(lastWriteQueueSize)\u001b[39m]: \u001b[33m0\u001b[39m,",
                                "  [\u001b[32mSymbol(timeout)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "  [\u001b[32mSymbol(kBuffer)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "  [\u001b[32mSymbol(kBufferCb)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "  [\u001b[32mSymbol(kBufferGen)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "  [\u001b[32mSymbol(kCapture)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "  [\u001b[32mSymbol(kBytesRead)\u001b[39m]: \u001b[33m0\u001b[39m,",
                                "  [\u001b[32mSymbol(kBytesWritten)\u001b[39m]: \u001b[33m0\u001b[39m,",
                                "  [\u001b[32mSymbol(keypress-decoder)\u001b[39m]: StringDecoder {",
                                "    encoding: \u001b[32m'utf8'\u001b[39m,",
                                "    [\u001b[32mSymbol(kNativeDecoder)\u001b[39m]: <Buffer 00 00 00 00 00 00 01>",
                                "  },",
                                "  [\u001b[32mSymbol(escape-decoder)\u001b[39m]: Object [Generator] {}",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Migratory Birds](https://www.hackerrank.com/challenges/migratory-birds/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}